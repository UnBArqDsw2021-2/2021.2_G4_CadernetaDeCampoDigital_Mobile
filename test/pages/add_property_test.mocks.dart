// Mocks generated by Mockito 5.1.0 from annotations
// in caderneta_campo_digital/test/pages/add_property_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;
import 'dart:ui' as _i6;

import 'package:caderneta_campo_digital/controllers/add_property/add_property_controller.dart'
    as _i4;
import 'package:caderneta_campo_digital/models/AddPropertyModel.dart' as _i2;
import 'package:caderneta_campo_digital/services/add_property/add_property_service.dart'
    as _i7;
import 'package:dio/dio.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeAddPropertyModel_0 extends _i1.Fake implements _i2.AddPropertyModel {
}

class _FakeResponse_1<T> extends _i1.Fake implements _i3.Response<T> {}

/// A class which mocks [AddPropertyController].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddPropertyController extends _i1.Mock
    implements _i4.AddPropertyController {
  MockAddPropertyController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set state(dynamic _state) =>
      super.noSuchMethod(Invocation.setter(#state, _state),
          returnValueForMissingStub: null);
  @override
  _i2.AddPropertyModel get addProperty =>
      (super.noSuchMethod(Invocation.getter(#addProperty),
          returnValue: _FakeAddPropertyModel_0()) as _i2.AddPropertyModel);
  @override
  set addProperty(_i2.AddPropertyModel? _addProperty) =>
      super.noSuchMethod(Invocation.setter(#addProperty, _addProperty),
          returnValueForMissingStub: null);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  _i5.Future<dynamic> submit() =>
      (super.noSuchMethod(Invocation.method(#submit, []),
          returnValue: Future<dynamic>.value()) as _i5.Future<dynamic>);
  @override
  void addListener(_i6.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i6.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}

/// A class which mocks [AddPropertyService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddPropertyService extends _i1.Mock
    implements _i7.AddPropertyService {
  MockAddPropertyService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.Response<dynamic>> createProperty(
          Map<String, dynamic>? infoProperty) =>
      (super.noSuchMethod(Invocation.method(#createProperty, [infoProperty]),
              returnValue: Future<_i3.Response<dynamic>>.value(
                  _FakeResponse_1<dynamic>()))
          as _i5.Future<_i3.Response<dynamic>>);
}

/// A class which mocks [AddPropertyModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddPropertyModel extends _i1.Mock implements _i2.AddPropertyModel {
  MockAddPropertyModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get cep =>
      (super.noSuchMethod(Invocation.getter(#cep), returnValue: '') as String);
  @override
  String get cidade =>
      (super.noSuchMethod(Invocation.getter(#cidade), returnValue: '')
          as String);
  @override
  String get uf =>
      (super.noSuchMethod(Invocation.getter(#uf), returnValue: '') as String);
  @override
  String get bairro =>
      (super.noSuchMethod(Invocation.getter(#bairro), returnValue: '')
          as String);
  @override
  String get casa =>
      (super.noSuchMethod(Invocation.getter(#casa), returnValue: '') as String);
  @override
  String get logradouro =>
      (super.noSuchMethod(Invocation.getter(#logradouro), returnValue: '')
          as String);
  @override
  String get hectares =>
      (super.noSuchMethod(Invocation.getter(#hectares), returnValue: '')
          as String);
  @override
  String get complemento =>
      (super.noSuchMethod(Invocation.getter(#complemento), returnValue: '')
          as String);
  @override
  _i2.AddPropertyModel copyWith(
          {String? cep,
          String? cidade,
          String? uf,
          String? bairro,
          String? casa,
          String? logradouro,
          String? hectares,
          String? complemento}) =>
      (super.noSuchMethod(
          Invocation.method(#copyWith, [], {
            #cep: cep,
            #cidade: cidade,
            #uf: uf,
            #bairro: bairro,
            #casa: casa,
            #logradouro: logradouro,
            #hectares: hectares,
            #complemento: complemento
          }),
          returnValue: _FakeAddPropertyModel_0()) as _i2.AddPropertyModel);
  @override
  Map<String, dynamic> toMap() =>
      (super.noSuchMethod(Invocation.method(#toMap, []),
          returnValue: <String, dynamic>{}) as Map<String, dynamic>);
  @override
  String toJson() =>
      (super.noSuchMethod(Invocation.method(#toJson, []), returnValue: '')
          as String);
}
